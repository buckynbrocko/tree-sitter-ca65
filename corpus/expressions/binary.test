================================================================================
binary expressions
================================================================================

tree-sitter-expression-block-start

1 - 1
1 + 1
1 * 1
1 / 1
1 << 1
1 >> 1
1 < 1
1 > 1

; precedence

!(1 > 1)
!1 > 1
1 * -1
1 + 1 + 1 + 1

; associativity/precedence tests

1 * 1 + 1 
1 + 1 * 1
6 / (2 * 3)

tree-sitter-expression-block-end

--------------------------------------------------------------------------------

(source_file
  (binary_expression
    left: (decimal_literal)
    operator: (minus)
    right: (decimal_literal))
  (binary_expression
    left: (decimal_literal)
    operator: (plus)
    right: (decimal_literal))
  (binary_expression
    left: (decimal_literal)
    operator: (star)
    right: (decimal_literal))
  (binary_expression
    left: (decimal_literal)
    operator: (slash)
    right: (decimal_literal))
  (binary_expression
    left: (decimal_literal)
    operator: (LTLT)
    right: (decimal_literal))
  (binary_expression
    left: (decimal_literal)
    operator: (GTGT)
    right: (decimal_literal))
  (binary_expression
    left: (decimal_literal)
    operator: (LT)
    right: (decimal_literal))
  (binary_expression
    left: (decimal_literal)
    operator: (GT)
    right: (decimal_literal))
  (comment)
  (unary_expression
    operator: (bang)
    operand: (binary_expression
      left: (decimal_literal)
      operator: (GT)
      right: (decimal_literal)))
  (unary_expression
    operator: (bang)
    operand: (binary_expression
      left: (decimal_literal)
      operator: (GT)
      right: (decimal_literal)))
  (binary_expression
    left: (decimal_literal)
    operator: (star)
    right: (unary_expression
      operator: (minus)
      operand: (decimal_literal)))
  (binary_expression
    left: (decimal_literal)
    operator: (plus)
    right: (binary_expression
      left: (decimal_literal)
      operator: (plus)
      right: (binary_expression
        left: (decimal_literal)
        operator: (plus)
        right: (decimal_literal))))
  (comment)
  (binary_expression
    left: (binary_expression
      left: (decimal_literal)
      operator: (star)
      right: (decimal_literal))
    operator: (plus)
    right: (decimal_literal))
  (binary_expression
    left: (decimal_literal)
    operator: (plus)
    right: (binary_expression
      left: (decimal_literal)
      operator: (star)
      right: (decimal_literal)))
  (binary_expression
    left: (decimal_literal)
    operator: (slash)
    right: (binary_expression
      left: (decimal_literal)
      operator: (star)
      right: (decimal_literal))))
